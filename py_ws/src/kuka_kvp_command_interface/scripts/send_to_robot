#!/usr/bin/env python3


import rospy
from std_msgs.msg import String
import socket                                                   # Used for TCP/IP communication



ROBOT_IP = '172.31.1.147'
KVP_COMMAND_VARIABLE = 'COM_E6AXIS'

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)		# Initializing client connection

  
class KUKA(object):

    def __init__(self, TCP_IP):
        try: 
            client.connect((TCP_IP, 7000))                      # Open socket. kukavarproxy actively listens on TCP port 7000
        except: 
            self.error_list(1)


    def send (self, var, val, msgID):
        """
        kukavarproxy message format is 
        msg ID in HEX                       2 bytes
        msg length in HEX                   2 bytes
        read (0) or write (1)               1 byte
        variable name length in HEX         2 bytes
        variable name in ASCII              # bytes
        variable value length in HEX        2 bytes
        variable value in ASCII             # bytes
        """
        try:
            msg = bytearray()
            temp = bytearray()
            if val != "":
                val = str(val)
                msg.append((len(val) & 0xff00) >> 8)            # MSB of variable value length
                msg.append((len(val) & 0x00ff))                 # LSB of variable value length
                msg.extend(map(ord, val))                       # Variable value in ASCII
            temp.append(bool(val))                              # Read (0) or Write (1)
            temp.append(((len(var)) & 0xff00) >> 8)             # MSB of variable name length
            temp.append((len(var)) & 0x00ff)                    # LSB of variable name length
            temp.extend(map(ord, var))                          # Variable name in ASCII 
            msg = temp + msg
            del temp[:]
            temp.append((msgID & 0xff00) >> 8)                  # MSB of message ID
            temp.append(msgID & 0x00ff)                         # LSB of message ID
            temp.append((len(msg) & 0xff00) >> 8)               # MSB of message length
            temp.append((len(msg) & 0x00ff))                    # LSB of message length
            msg = temp + msg
        except :
            self.error_list(2)
        try:
            client.send(msg)
            return  client.recv(1024)                           # Return response with buffer size of 1024 bytes
        except :
            self.error_list(1)


    def __get_var(self, msg):
        """
        kukavarproxy response format is 
        msg ID in HEX                       2 bytes
        msg length in HEX                   2 bytes
        read (0) or write (1)               1 byte
        variable value length in HEX        2 bytes
        variable value in ASCII             # bytes
        Not sure if the following bytes contain the client number, or they're just check bytes. I'll check later.
        """
        try:
            lsb = int( msg[5])
            msb = int( msg[6])
            lenValue = (lsb <<8 | msb)
            return str(msg [7: 7+lenValue],'utf-8')  

        except:
            self.error_list(2)

    def read (self, var, msgID=0):
        try:
            return self.__get_var(self.send(var,"",msgID))  
        except :
            self.error_list(2)


    def write (self, var, val, msgID=0):
        try:
            if val != (""): return self.__get_var(self.send(var,val,msgID))
            else: raise self.error_list(3)
        except :
            self.error_list(2)


    def disconnect (self):
            # CLose socket
            client.close()


    def error_list (self, ID):
        if ID == 1:
            print ("Network Error (tcp_error)")
            print ("    Check your KRC's IP address on the network, and make sure the KVP Server is running.")
            self.disconnect()
            raise SystemExit
        elif ID == 2:
            print ("Python Error.")
            print ("    Update your python version >= 3.8.x.")
            self.disconnect()
            raise SystemExit
        elif ID == 3:
            print ("Error in write() statement.")
            print ("    Variable value is not defined.")
    

robot = KUKA(ROBOT_IP)


# Callback function; sends data from the subscribed topic to the robot
def callback_fn(subscribedData):
    
    joint_info = subscribedData.data
    robot.write(KVP_COMMAND_VARIABLE, joint_info)
    rospy.loginfo(f'Sending to robot: {joint_info}')


#Subscriber node function which will subscribe the messages from the Topic
def send_to_robot():
    
    #initialize the subscriber node called 'kvp_command_node'
    rospy.init_node('kvp_command_node', anonymous=False)
    
    #This is to subscribe to the messages from the topic named 'robotCoordinates'
    rospy.Subscriber('robotCoordinates', String, callback_fn)
    
    #rospy.spin() stops the node from exiting until the node has been shut down
    rospy.spin()
    
  
if __name__ == '__main__':
    try:
        send_to_robot()
    except rospy.ROSInterruptException:
        # TODO: Log this exception!
        rospy.loginfo('ROS Interrupt Exception')
        pass